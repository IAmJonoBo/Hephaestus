# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

from hephaestus.api.grpc.protos import hephaestus_pb2 as hephaestus__pb2

GRPC_GENERATED_VERSION = "1.75.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in hephaestus_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class QualityServiceStub(object):
    """Quality Service - Execute quality gates and checks"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunGuardRails = channel.unary_unary(
            "/hephaestus.v1.QualityService/RunGuardRails",
            request_serializer=hephaestus__pb2.GuardRailsRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.GuardRailsResponse.FromString,
            _registered_method=True,
        )
        self.RunGuardRailsStream = channel.unary_stream(
            "/hephaestus.v1.QualityService/RunGuardRailsStream",
            request_serializer=hephaestus__pb2.GuardRailsRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.GuardRailsProgress.FromString,
            _registered_method=True,
        )
        self.CheckDrift = channel.unary_unary(
            "/hephaestus.v1.QualityService/CheckDrift",
            request_serializer=hephaestus__pb2.DriftRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.DriftResponse.FromString,
            _registered_method=True,
        )


class QualityServiceServicer(object):
    """Quality Service - Execute quality gates and checks"""

    def RunGuardRails(self, request, context):
        """Run guard-rails quality pipeline (blocking)"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RunGuardRailsStream(self, request, context):
        """Run guard-rails with streaming progress updates"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckDrift(self, request, context):
        """Check for tool version drift"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_QualityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RunGuardRails": grpc.unary_unary_rpc_method_handler(
            servicer.RunGuardRails,
            request_deserializer=hephaestus__pb2.GuardRailsRequest.FromString,
            response_serializer=hephaestus__pb2.GuardRailsResponse.SerializeToString,
        ),
        "RunGuardRailsStream": grpc.unary_stream_rpc_method_handler(
            servicer.RunGuardRailsStream,
            request_deserializer=hephaestus__pb2.GuardRailsRequest.FromString,
            response_serializer=hephaestus__pb2.GuardRailsProgress.SerializeToString,
        ),
        "CheckDrift": grpc.unary_unary_rpc_method_handler(
            servicer.CheckDrift,
            request_deserializer=hephaestus__pb2.DriftRequest.FromString,
            response_serializer=hephaestus__pb2.DriftResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "hephaestus.v1.QualityService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("hephaestus.v1.QualityService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class QualityService(object):
    """Quality Service - Execute quality gates and checks"""

    @staticmethod
    def RunGuardRails(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.QualityService/RunGuardRails",
            hephaestus__pb2.GuardRailsRequest.SerializeToString,
            hephaestus__pb2.GuardRailsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RunGuardRailsStream(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/hephaestus.v1.QualityService/RunGuardRailsStream",
            hephaestus__pb2.GuardRailsRequest.SerializeToString,
            hephaestus__pb2.GuardRailsProgress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CheckDrift(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.QualityService/CheckDrift",
            hephaestus__pb2.DriftRequest.SerializeToString,
            hephaestus__pb2.DriftResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class CleanupServiceStub(object):
    """Cleanup Service - Workspace cleanup operations"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Clean = channel.unary_unary(
            "/hephaestus.v1.CleanupService/Clean",
            request_serializer=hephaestus__pb2.CleanupRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.CleanupResponse.FromString,
            _registered_method=True,
        )
        self.PreviewCleanup = channel.unary_unary(
            "/hephaestus.v1.CleanupService/PreviewCleanup",
            request_serializer=hephaestus__pb2.CleanupRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.CleanupPreview.FromString,
            _registered_method=True,
        )


class CleanupServiceServicer(object):
    """Cleanup Service - Workspace cleanup operations"""

    def Clean(self, request, context):
        """Execute cleanup operation"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PreviewCleanup(self, request, context):
        """Preview cleanup without executing"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CleanupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Clean": grpc.unary_unary_rpc_method_handler(
            servicer.Clean,
            request_deserializer=hephaestus__pb2.CleanupRequest.FromString,
            response_serializer=hephaestus__pb2.CleanupResponse.SerializeToString,
        ),
        "PreviewCleanup": grpc.unary_unary_rpc_method_handler(
            servicer.PreviewCleanup,
            request_deserializer=hephaestus__pb2.CleanupRequest.FromString,
            response_serializer=hephaestus__pb2.CleanupPreview.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "hephaestus.v1.CleanupService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("hephaestus.v1.CleanupService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class CleanupService(object):
    """Cleanup Service - Workspace cleanup operations"""

    @staticmethod
    def Clean(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.CleanupService/Clean",
            hephaestus__pb2.CleanupRequest.SerializeToString,
            hephaestus__pb2.CleanupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def PreviewCleanup(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.CleanupService/PreviewCleanup",
            hephaestus__pb2.CleanupRequest.SerializeToString,
            hephaestus__pb2.CleanupPreview.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class AnalyticsServiceStub(object):
    """Analytics Service - Code analytics and rankings"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRankings = channel.unary_unary(
            "/hephaestus.v1.AnalyticsService/GetRankings",
            request_serializer=hephaestus__pb2.RankingsRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.RankingsResponse.FromString,
            _registered_method=True,
        )
        self.GetHotspots = channel.unary_unary(
            "/hephaestus.v1.AnalyticsService/GetHotspots",
            request_serializer=hephaestus__pb2.HotspotsRequest.SerializeToString,
            response_deserializer=hephaestus__pb2.HotspotsResponse.FromString,
            _registered_method=True,
        )


class AnalyticsServiceServicer(object):
    """Analytics Service - Code analytics and rankings"""

    def GetRankings(self, request, context):
        """Get refactoring rankings"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetHotspots(self, request, context):
        """Get code hotspots"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AnalyticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetRankings": grpc.unary_unary_rpc_method_handler(
            servicer.GetRankings,
            request_deserializer=hephaestus__pb2.RankingsRequest.FromString,
            response_serializer=hephaestus__pb2.RankingsResponse.SerializeToString,
        ),
        "GetHotspots": grpc.unary_unary_rpc_method_handler(
            servicer.GetHotspots,
            request_deserializer=hephaestus__pb2.HotspotsRequest.FromString,
            response_serializer=hephaestus__pb2.HotspotsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "hephaestus.v1.AnalyticsService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("hephaestus.v1.AnalyticsService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class AnalyticsService(object):
    """Analytics Service - Code analytics and rankings"""

    @staticmethod
    def GetRankings(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.AnalyticsService/GetRankings",
            hephaestus__pb2.RankingsRequest.SerializeToString,
            hephaestus__pb2.RankingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetHotspots(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/hephaestus.v1.AnalyticsService/GetHotspots",
            hephaestus__pb2.HotspotsRequest.SerializeToString,
            hephaestus__pb2.HotspotsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
