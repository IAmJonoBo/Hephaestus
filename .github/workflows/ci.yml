# CI references: uv+Actions (https://github.com/astral-sh/uv/tree/main/projects/setup-uv), uv lock export (https://docs.astral.sh/uv/guides/export/), pip wheel/offline installs (https://pip.pypa.io/en/stable/cli/pip_wheel/), GitHub artifact docs (https://docs.github.com/actions/using-workflows/storing-workflow-data-as-artifacts)
name: CI (uv with offline-ready install)

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  # Fast/normal path: GitHub-hosted runner with egress allowed to GitHub & PyPI.
  deps-and-tests-online:
    name: Online CI (uv sync)
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Install uv + requested Python (uses GitHub infra; no curl to astral.sh).
      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.12"
          enable-cache: true

      # Install from the lockfile, including dev & qa extras.
      - name: Sync dependencies (locked)
        run: uv sync --locked --extra dev --extra qa

      - name: Run tests
        run: uv run pytest -q

  # Offline-capable path for restricted networks:
  # 1) Build a wheelhouse on an internet-enabled runner (must match OS/arch of the offline runner).
  build-wheelhouse:
    name: Build wheelhouse artifact (internet required)
    permissions:
      contents: read
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.12"
          enable-cache: true

      # Export the uv.lock to requirements.txt for pip-only installs.
      - name: Export locked requirements (dev + qa)
        run: |
          uv export --format requirements-txt \
            --group dev --group qa \
            --all-extras \
            -o requirements.txt

      # Build wheels for *all* deps + build a wheel for this project itself.
      - name: Build wheelhouse
        run: |
          python -m pip install --upgrade pip
          pip wheel -r requirements.txt -w wheelhouse
          uv build --wheel
          cp dist/*.whl wheelhouse/

      - name: Upload wheelhouse artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse
          path: |
            wheelhouse
            requirements.txt

  # 2) Fully offline install from the wheelhouse on a restricted runner.
  ci-offline:
    name: Offline CI (install from wheelhouse)
    needs: build-wheelhouse
    permissions:
      contents: read
    runs-on:
      - self-hosted
      - macOS # adjust to match your restricted runner's labels (case sensitive)
    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Download wheelhouse artifact
        uses: actions/download-artifact@v5
        with:
          name: wheelhouse
          path: wheelhouse

      # No internet: install only from local wheels.
      - name: Install from wheelhouse (no network)
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install --no-index --find-links=wheelhouse -r wheelhouse/requirements.txt
          # Install our package from the local wheel by name (resolves to wheel in find-links).
          pip install --no-index --find-links=wheelhouse hephaestus

      - name: Run tests (offline env)
        run: . .venv/bin/activate && pytest -q

      - name: Run offline QA checks
        run: |
          . .venv/bin/activate
          python -m ruff check .
          python -m ruff format --check .
          python -m mypy src tests

# Notes:
# - If your restricted runner is a different OS/arch, you must build the wheelhouse on a matching runner.
# - Prefer the online job when egress is available; use the offline pair (build + offline) otherwise.
# - The online job uses uv's built-in caching via setup-uv.
