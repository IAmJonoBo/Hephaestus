---
# CI references:
# - uv + Actions setup: https://github.com/astral-sh/uv/tree/main/projects/setup-uv
# - uv lock export: https://docs.astral.sh/uv/guides/export/
# - pip wheel/offline installs: https://pip.pypa.io/en/stable/cli/pip_wheel/
# - GitHub artifacts: https://docs.github.com/actions/using-workflows/storing-workflow-data-as-artifacts
name: CI (uv with offline-ready install)

permissions:
  contents: read

on:
  push:
    branches:
      - "**"
  pull_request: {}

jobs:
  # Fast/normal path: GitHub-hosted runner with egress allowed to GitHub & PyPI.
  deps-and-tests-online:
    name: Online CI (uv sync)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Install uv + requested Python (uses GitHub infra; no curl to astral.sh).
      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v7
        with:
          python-version: "3.12"
          enable-cache: true

      # Install from the lockfile, including dev & qa extras.
      - name: Sync dependencies (locked)
        run: uv sync --locked --extra dev --extra qa

      - name: Run tests
        run: uv run pytest -q

      - name: Run ruff lint
        run: uv run python -m ruff check .

      - name: Run ruff format check
        run: uv run python -m ruff format --check .

      - name: Run mypy
        run: uv run mypy src tests

  # Offline-capable path for restricted networks:
  # 1) Build a wheelhouse on an internet-enabled runner (must match the OS/arch of
  #    the offline runner).
  build-wheelhouse:
    name: Build wheelhouse artifact (internet required)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup uv and Python
        uses: astral-sh/setup-uv@v7
        with:
          python-version: "3.12"
          enable-cache: true

      # Export the uv.lock to requirements.txt for pip-only installs.
      - name: Export locked requirements (dev + qa)
        run: |
          uv export --locked --format requirements-txt \
            --group dev \
            --group qa \
            --all-extras \
            -o requirements.txt

      # Build wheels for *all* deps + build a wheel for this project itself.
      - name: Build wheelhouse
        env:
          COPYFILE_DISABLE: "1"
        run: |
          set -xeuo pipefail
          export PYTHONPATH="src:${PYTHONPATH:-}"
          python -m pip install --upgrade pip
          pip wheel -r requirements.txt -w wheelhouse
          uv build --wheel
          cp dist/*.whl wheelhouse/
          uv run -- python -m hephaestus.cli wheelhouse sanitize wheelhouse
          uv run -- python -m hephaestus.cli wheelhouse verify wheelhouse

      - name: Upload wheelhouse artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse
          path: |
            wheelhouse
            requirements.txt

  # 2) Fully offline install from the wheelhouse on a restricted runner.
  #    Ensure the offline runner uses the same OS/arch as build-wheelhouse (here: ubuntu-24.04).
  ci-offline:
    name: Offline CI (install from wheelhouse)
    needs: build-wheelhouse
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Verify Python version
        run: |
          python - <<'PY'
          import platform, sys
          expected = (3, 12)
          if sys.version_info[:2] != expected:
              raise SystemExit(
                  f"Offline environment Python {sys.version_info[:2]} does not match expected {expected}."
              )
          print(f"Verified Python {platform.python_version()} for offline install parity.")
          PY

      - name: Download wheelhouse artifact
        uses: actions/download-artifact@v5
        with:
          name: wheelhouse
          path: wheelhouse

      - name: Validate wheelhouse contents
        run: |
          test -d wheelhouse/wheelhouse || (echo "wheelhouse directory missing in artifact" && exit 1)
          test -f wheelhouse/requirements.txt || (echo "requirements.txt missing in wheelhouse artifact" && exit 1)

      # No internet: install only from local wheels.
      - name: Install from wheelhouse (no network)
        run: |
          python -m venv .venv
          . .venv/bin/activate
          # The wheels reside in wheelhouse/wheelhouse after artifact extraction.
          pip install --no-index \
            --find-links=wheelhouse/wheelhouse \
            -r wheelhouse/requirements.txt
          # Install our package from the local wheel by name (resolves to wheel in
          # find-links).
          pip install --no-index \
            --find-links=wheelhouse/wheelhouse \
            hephaestus

      - name: Run tests (offline env)
        run: . .venv/bin/activate && pytest -q

      - name: Run offline QA checks
        run: |
          . .venv/bin/activate
          python -m ruff check .
          python -m ruff format --check .
          python -m mypy src tests

# Notes:
# - If your restricted runner is a different OS/arch, you must build the wheelhouse on a matching runner.
# - Prefer the online job when egress is available; use the offline pair (build + offline) otherwise.
# - The online job uses uv's built-in caching via setup-uv.
