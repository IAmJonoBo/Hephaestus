openapi: 3.0.3
info:
  title: Hephaestus API
  description: |
    REST API for Hephaestus quality gate automation toolkit.
    
    This API provides remote access to Hephaestus functionality including:
    - Quality gate execution (guard-rails)
    - Workspace cleanup
    - Analytics and rankings
    - Schema introspection
    
    **Note**: This is Phase 1 (Foundation) specification. Implementation in progress.
  version: 0.3.0
  contact:
    name: Hephaestus Project
    url: https://github.com/IAmJonoBo/Hephaestus
  license:
    name: MIT
    url: https://github.com/IAmJonoBo/Hephaestus/blob/main/LICENSE

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

security:
  - ApiKeyAuth: []

paths:
  /quality/guard-rails:
    post:
      summary: Run comprehensive quality pipeline
      description: Execute all quality gates (cleanup, lint, format, typecheck, test, audit)
      operationId: runGuardRails
      tags:
        - Quality Gates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                no_format:
                  type: boolean
                  description: Skip formatting step
                  default: false
                workspace:
                  type: string
                  description: Workspace directory path
                drift_check:
                  type: boolean
                  description: Check for tool version drift
                  default: false
      responses:
        '200':
          description: Quality pipeline completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GuardRailsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /cleanup:
    post:
      summary: Clean workspace artifacts
      description: Remove build artifacts, caches, and temporary files
      operationId: cleanup
      tags:
        - Cleanup
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                root:
                  type: string
                  description: Root directory to clean
                deep_clean:
                  type: boolean
                  description: Perform deep cleanup including git and virtualenvs
                  default: false
                dry_run:
                  type: boolean
                  description: Preview changes without executing
                  default: false
      responses:
        '200':
          description: Cleanup completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /analytics/rankings:
    get:
      summary: Get refactoring rankings
      description: Retrieve ranked list of files for refactoring based on strategy
      operationId: getRankings
      tags:
        - Analytics
      parameters:
        - name: strategy
          in: query
          schema:
            type: string
            enum: [risk_weighted, coverage_first, churn_based, composite]
            default: composite
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Rankings retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RankingsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /tasks/{task_id}:
    get:
      summary: Get async task status
      description: Retrieve status and result of an asynchronous task
      operationId: getTaskStatus
      tags:
        - Tasks
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '404':
          description: Task not found
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key

  schemas:
    GuardRailsResponse:
      type: object
      required:
        - success
        - gates
        - duration
      properties:
        success:
          type: boolean
          description: Whether all gates passed
        gates:
          type: array
          items:
            $ref: '#/components/schemas/QualityGateResult'
        duration:
          type: number
          format: float
          description: Total execution time in seconds
        task_id:
          type: string
          description: Async task ID (if applicable)

    QualityGateResult:
      type: object
      required:
        - name
        - passed
        - duration
      properties:
        name:
          type: string
          description: Gate name (e.g., "lint", "test")
        passed:
          type: boolean
          description: Whether gate passed
        message:
          type: string
          description: Status message
        duration:
          type: number
          format: float
          description: Execution time in seconds
        metadata:
          type: object
          additionalProperties: true
          description: Additional gate-specific data

    CleanupResponse:
      type: object
      required:
        - files_deleted
        - size_freed
      properties:
        files_deleted:
          type: integer
          description: Number of files removed
        size_freed:
          type: integer
          description: Disk space freed in bytes
        manifest:
          type: object
          description: Audit manifest with detailed cleanup actions
          additionalProperties: true

    RankingsResponse:
      type: object
      required:
        - rankings
        - strategy
      properties:
        rankings:
          type: array
          items:
            $ref: '#/components/schemas/FileRanking'
        strategy:
          type: string
          description: Ranking strategy used

    FileRanking:
      type: object
      required:
        - path
        - score
      properties:
        path:
          type: string
          description: File path
        score:
          type: number
          format: float
          description: Ranking score
        metrics:
          type: object
          description: Underlying metrics
          properties:
            churn:
              type: number
            coverage:
              type: number
            complexity:
              type: number

    TaskStatus:
      type: object
      required:
        - task_id
        - status
        - progress
      properties:
        task_id:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        progress:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Progress percentage (0.0 to 1.0)
        result:
          type: object
          description: Task result (if completed)
        error:
          type: string
          description: Error message (if failed)

  responses:
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: Invalid API key

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: An internal error occurred

tags:
  - name: Quality Gates
    description: Execute quality gate pipelines
  - name: Cleanup
    description: Workspace cleanup operations
  - name: Analytics
    description: Code analytics and rankings
  - name: Tasks
    description: Async task management
